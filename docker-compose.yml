version: "3.8"

services:
    nginx:
        environment:
            - NGINX_HOST=${NGINX_HOST}
        build:
            context: .
            dockerfile: ./docker/nginx/Dockerfile
        container_name: nginx
        volumes:
            - ./docker/nginx/default.conf:/etc/nginx/conf.d/default.conf
        ports:
            - 80:80
        restart: always
        networks:
            - frontend
        depends_on:
            - node

    node:
        environment:
            - NODE_ENV=${NODE_ENV}
            - JWT_AT_SECRET=${JWT_AT_SECRET}
            - JWT_RT_SECRET=${JWT_RT_SECRET}
            - DATABASE_URL=${DB_HOST}
        build:
            context: .
            dockerfile: ./docker/backend/Dockerfile
            target: development
        container_name: node
        ports:
            - ${SERVER_PORT}:${SERVER_PORT}
        env_file:
            - .env
        volumes:
            - ./backend:/usr/src/app
        restart: always
        networks:
            - backend
            - frontend
        command: npm run start:dev
        depends_on:
            - mosquitto
            - mariadb

    mosquitto:
        image: eclipse-mosquitto:2.0.11
        container_name: mosquitto
        restart: always
        volumes:
            - ./mosquitto/mosquitto.conf:/mosquitto/config/mosquitto.conf
            - ./mosquitto/data:/mosquitto/data
            - ./mosquitto/log:/mosquitto/log
        ports:
            - "${MQTT_PORT}:1883"
            - "${WS_PORT}:9001"
        networks:
            - backend

    mariadb:
        image: mariadb:10
        restart: unless-stopped
        environment:
            - MYSQL_ROOT_PASSWORD=${ROOT_DBPASS}
            - MYSQL_DATABASE=mqtt
            - MYSQL_USER=prisma
            - MYSQL_PASSWORD=prisma
        ports:
            - "3306:3306"
        healthcheck:
            test: [ "CMD", "/usr/local/bin/healthcheck.sh", "--connect" ]
            interval: 5s
            timeout: 2s
            retries: 20
        volumes:
            - mariadb-data:/var/lib/mysql
            - ./error.log:/var/log/mysql/error.log
        networks:
            - backend

    client:
        environment:
            - FRONT_PORT=${FRONT_PORT}
        build:
            context: .
            dockerfile: ./docker/client/Dockerfile
        container_name: client
        ports:
            - ${FRONT_PORT}:${FRONT_PORT}
        volumes:
            - ./client:/usr/src/app
        restart: always
        networks:
            - frontend
        depends_on:
            - node

    elasticsearch:
        image: elasticsearch:${ELASTICSEARCH_VERSION}
        container_name: elasticsearch
        ports:
            - "9200:9200"
            - "9300:9300"
        volumes:
            - test_data:/usr/share/elasticsearch/data/
            - ./elasticsearch/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml
        environment:
            - discovery.type=${ELASTICSEARCH_DISCOVERY_TYPE}
            - http.host=${ELASTICSEARCH_HTTP_HOST}
            - transport.host=${ELASTICSEARCH_TRANSPORT_HOST}
            - xpack.security.enabled=${ELASTICSEARCH_XPACK_SECURITY_ENABLED}
            - xpack.monitoring.enabled=${ELASTICSEARCH_XPACK_MONITORING_ENABLED}
            - cluster.name=${ELASTICSEARCH_CLUSTER_NAME}
            - bootstrap.memory_lock=${ELASTICSEARCH_BOOTSTRAP_MEMORY_LOCK}
        networks:
            - backend

    logstash:
        image: logstash:${LOGSTASH_VERSION}
        container_name: logstash
        ports:
            - "5044:5044"
            - "9600:9600"
        volumes:
            - ./logstash/logstash.conf:/usr/share/logstash/pipeline/logstash.conf
            - ./logstash/logstash.yml:/usr/share/logstash/config/logstash.yml
            - ls_data:/usr/share/logstash/data
        networks:
            - backend
        depends_on:
            - elasticsearch
    
    kibana:
        image: kibana:${KIBANA_VERSION}
        container_name: kibana
        environment:
            - ELASTICSEARCH_URL=${KIBANA_ELASTICSEARCH_URL}
            - ELASTIC_PASSWORD=${KIBANA_ELASTIC_PASSWORD}
        ports:
            - "5601:5601"
        volumes:
            - ./kibana/kibana.yml:/usr/share/kibana/config/kibana.yml
            - kb_data:/usr/share/kibana/data
        networks:
            - backend
        depends_on:
            - elasticsearch

volumes:
    mariadb-data: {}
    test_data: {}
    ls_data: {}
    kb_data: {}

networks:
    frontend:
        driver: bridge
    backend:
        driver: bridge
